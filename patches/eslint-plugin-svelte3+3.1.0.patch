diff --git a/node_modules/eslint-plugin-svelte3/index.js b/node_modules/eslint-plugin-svelte3/index.js
index ef5da56..212587f 100644
--- a/node_modules/eslint-plugin-svelte3/index.js
+++ b/node_modules/eslint-plugin-svelte3/index.js
@@ -62,6 +62,15 @@ const get_line_offsets = str => {
 	return offsets;
 };
 
+// find the index of the last element of an array matching a condition
+const find_last_index = (array, cond) => {
+	const idx = array.findIndex(item => !cond(item));
+	return idx === -1 ? array.length - 1 : idx - 1;
+};
+
+// find the last element of an array matching a condition
+const find_last = (array, cond) => array[find_last_index(array, cond)];
+
 // return a new block
 const new_block = () => ({ transformed_code: '', line_offsets: null, translations: new Map() });
 
@@ -100,7 +109,7 @@ Linter.prototype.verify = function(code, config, options) {
 	processor_options.ignore_styles = settings['svelte3/ignore-styles'];
 	processor_options.compiler_options = settings['svelte3/compiler-options'];
 	processor_options.named_blocks = settings['svelte3/named-blocks'];
-	processor_options.typescript = settings['svelte3/typescript'];
+	processor_options.svelte_preprocess = settings['svelte3/preprocess'];
 	// call original Linter#verify
 	return verify.call(this, code, config, options);
 };
@@ -111,6 +120,9 @@ const reset = () => {
 		messages: null,
 		var_names: null,
 		blocks: new Map(),
+		pre_line_offsets: null,
+		post_line_offsets: null,
+		mappings: null,
 	};
 };
 reset();
@@ -121,28 +133,30 @@ for (var i = 0; i < chars.length; i++) {
     charToInteger[chars.charCodeAt(i)] = i;
 }
 function decode(mappings) {
+    var generatedCodeColumn = 0; // first field
+    var sourceFileIndex = 0; // second field
+    var sourceCodeLine = 0; // third field
+    var sourceCodeColumn = 0; // fourth field
+    var nameIndex = 0; // fifth field
     var decoded = [];
     var line = [];
-    var segment = [
-        0,
-        0,
-        0,
-        0,
-        0,
-    ];
-    var j = 0;
-    for (var i = 0, shift = 0, value = 0; i < mappings.length; i++) {
+    var segment = [];
+    for (var i = 0, j = 0, shift = 0, value = 0, len = mappings.length; i < len; i++) {
         var c = mappings.charCodeAt(i);
         if (c === 44) { // ","
-            segmentify(line, segment, j);
+            if (segment.length)
+                line.push(segment);
+            segment = [];
             j = 0;
         }
         else if (c === 59) { // ";"
-            segmentify(line, segment, j);
+            if (segment.length)
+                line.push(segment);
+            segment = [];
             j = 0;
             decoded.push(line);
             line = [];
-            segment[0] = 0;
+            generatedCodeColumn = 0;
         }
         else {
             var integer = charToInteger[c];
@@ -159,238 +173,40 @@ function decode(mappings) {
                 var shouldNegate = value & 1;
                 value >>>= 1;
                 if (shouldNegate) {
-                    value = value === 0 ? -0x80000000 : -value;
+                    value = -value;
+                    if (value === 0)
+                        value = -0x80000000;
+                }
+                if (j == 0) {
+                    generatedCodeColumn += value;
+                    segment.push(generatedCodeColumn);
+                }
+                else if (j === 1) {
+                    sourceFileIndex += value;
+                    segment.push(sourceFileIndex);
+                }
+                else if (j === 2) {
+                    sourceCodeLine += value;
+                    segment.push(sourceCodeLine);
+                }
+                else if (j === 3) {
+                    sourceCodeColumn += value;
+                    segment.push(sourceCodeColumn);
+                }
+                else if (j === 4) {
+                    nameIndex += value;
+                    segment.push(nameIndex);
                 }
-                segment[j] += value;
                 j++;
                 value = shift = 0; // reset
             }
         }
     }
-    segmentify(line, segment, j);
+    if (segment.length)
+        line.push(segment);
     decoded.push(line);
     return decoded;
 }
-function segmentify(line, segment, j) {
-    // This looks ugly, but we're creating specialized arrays with a specific
-    // length. This is much faster than creating a new array (which v8 expands to
-    // a capacity of 17 after pushing the first item), or slicing out a subarray
-    // (which is slow). Length 4 is assumed to be the most frequent, followed by
-    // length 5 (since not everything will have an associated name), followed by
-    // length 1 (it's probably rare for a source substring to not have an
-    // associated segment data).
-    if (j === 4)
-        line.push([segment[0], segment[1], segment[2], segment[3]]);
-    else if (j === 5)
-        line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);
-    else if (j === 1)
-        line.push([segment[0]]);
-}
-
-class GeneratedFragmentMapper {
-	constructor(generated_code, diff) {
-		this.generated_code = generated_code;
-		this.diff = diff;
-	}
-
-	get_position_relative_to_fragment(position_relative_to_file) {
-		const fragment_offset = this.offset_in_fragment(offset_at(position_relative_to_file, this.generated_code));
-		return position_at(fragment_offset, this.diff.generated_content);
-	}
-
-	offset_in_fragment(offset) {
-		return offset - this.diff.generated_start
-	}
-}
-
-class OriginalFragmentMapper {
-	constructor(original_code, diff) {
-		this.original_code = original_code;
-		this.diff = diff;
-	}
-
-	get_position_relative_to_file(position_relative_to_fragment) {
-		const parent_offset = this.offset_in_parent(offset_at(position_relative_to_fragment, this.diff.original_content));
-		return position_at(parent_offset, this.original_code);
-	}
-
-	offset_in_parent(offset) {
-		return this.diff.original_start + offset;
-	}
-}
-
-class SourceMapper {
-	constructor(raw_source_map) {
-		this.raw_source_map = raw_source_map;
-	}
-
-	get_original_position(generated_position) {
-		if (generated_position.line < 0) {
-			return { line: -1, column: -1 };
-		}
-
-		// Lazy-load
-		if (!this.decoded) {
-			this.decoded = decode(JSON.parse(this.raw_source_map).mappings);
-		}
-
-		let line = generated_position.line;
-		let column = generated_position.column;
-
-		let line_match = this.decoded[line];
-		while (line >= 0 && (!line_match || !line_match.length)) {
-			line -= 1;
-			line_match = this.decoded[line];
-			if (line_match && line_match.length) {
-				return {
-					line: line_match[line_match.length - 1][2],
-					column: line_match[line_match.length - 1][3]
-				};
-			}
-		}
-
-		if (line < 0) {
-			return { line: -1, column: -1 };
-		}
-
-		const column_match = line_match.find((col, idx) =>
-			idx + 1 === line_match.length ||
-			(col[0] <= column && line_match[idx + 1][0] > column)
-		);
-
-		return {
-			line: column_match[2],
-			column: column_match[3],
-		};
-	}
-}
-
-class DocumentMapper {
-	constructor(original_code, generated_code, diffs) {
-		this.original_code = original_code;
-		this.generated_code = generated_code;
-		this.diffs = diffs;
-		this.mappers = diffs.map(diff => {
-			return {
-				start: diff.generated_start,
-				end: diff.generated_end,
-				diff: diff.diff,
-				generated_fragment_mapper: new GeneratedFragmentMapper(generated_code, diff),
-				source_mapper: new SourceMapper(diff.map),
-				original_fragment_mapper: new OriginalFragmentMapper(original_code, diff)
-			}
-		});
-	}
-
-	get_original_position(generated_position) {
-		generated_position = { line: generated_position.line - 1, column: generated_position.column };
-		const offset = offset_at(generated_position, this.generated_code);
-		let original_offset = offset;
-		for (const mapper of this.mappers) {
-			if (offset >= mapper.start && offset <= mapper.end) {
-				return this.map(mapper, generated_position);
-			}
-			if (offset > mapper.end) {
-				original_offset -= mapper.diff;
-			}
-		}
-		const original_position = position_at(original_offset, this.original_code);
-		return this.to_ESLint_position(original_position);
-	}
-
-	map(mapper, generated_position) {
-		// Map the position to be relative to the transpiled fragment
-		const position_in_transpiled_fragment = mapper.generated_fragment_mapper.get_position_relative_to_fragment(
-			generated_position
-		);
-		// Map the position, using the sourcemap, to the original position in the source fragment
-		const position_in_original_fragment = mapper.source_mapper.get_original_position(
-			position_in_transpiled_fragment
-		);
-		// Map the position to be in the original fragment's parent
-		const original_position = mapper.original_fragment_mapper.get_position_relative_to_file(position_in_original_fragment);
-		return this.to_ESLint_position(original_position);
-	}
-
-	to_ESLint_position(position) {
-		// ESLint line/column is 1-based
-		return { line: position.line + 1, column: position.column + 1 };
-	}
-
-}
-
-/**
- * Get the offset of the line and character position
- * @param position Line and character position
- * @param text The text for which the offset should be retrieved
- */
-function offset_at(position, text) {
-	const line_offsets = get_line_offsets$1(text);
-
-	if (position.line >= line_offsets.length) {
-		return text.length;
-	} else if (position.line < 0) {
-		return 0;
-	}
-
-	const line_offset = line_offsets[position.line];
-	const next_line_offset =
-		position.line + 1 < line_offsets.length ? line_offsets[position.line + 1] : text.length;
-
-	return clamp(next_line_offset, line_offset, line_offset + position.column);
-}
-
-function position_at(offset, text) {
-	offset = clamp(offset, 0, text.length);
-
-	const line_offsets = get_line_offsets$1(text);
-	let low = 0;
-	let high = line_offsets.length;
-	if (high === 0) {
-		return { line: 0, column: offset };
-	}
-
-	while (low < high) {
-		const mid = Math.floor((low + high) / 2);
-		if (line_offsets[mid] > offset) {
-			high = mid;
-		} else {
-			low = mid + 1;
-		}
-	}
-
-	// low is the least x for which the line offset is larger than the current offset
-	// or array.length if no line offset is larger than the current offset
-	const line = low - 1;
-	return { line, column: offset - line_offsets[line] };
-}
-
-function get_line_offsets$1(text) {
-	const line_offsets = [];
-	let is_line_start = true;
-
-	for (let i = 0; i < text.length; i++) {
-		if (is_line_start) {
-			line_offsets.push(i);
-			is_line_start = false;
-		}
-		const ch = text.charAt(i);
-		is_line_start = ch === '\r' || ch === '\n';
-		if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
-			i++;
-		}
-	}
-
-	if (is_line_start && text.length > 0) {
-		line_offsets.push(text.length);
-	}
-
-	return line_offsets;
-}
-
-function clamp(num, min, max) {
-	return Math.max(min, Math.min(max, num));
-}
 
 let default_compiler;
 
@@ -413,7 +229,7 @@ const find_contextual_names = (compiler, node) => {
 };
 
 // extract scripts to lint from component definition
-const preprocess = text => {
+const preprocess = (text, filename) => {
 	const compiler = processor_options.custom_compiler || default_compiler || (default_compiler = require('svelte/compiler'));
 	if (processor_options.ignore_styles) {
 		// wipe the appropriate <style> tags in the file
@@ -430,11 +246,112 @@ const preprocess = text => {
 			return processor_options.ignore_styles(attrs) ? match.replace(/\S/g, ' ') : match;
 		});
 	}
-
-	// get information about the component
 	let result;
+	let processedResult;
+	let processedModule;
+	let processedInstance;
+	let processedStyle;
+	let processedMarkup;
+	let moduleExt = 'js';
+	let instanceExt = 'js';
+	let moduleEndLine;
+	let processedModuleLineOffset;
+	let instanceEndLine;
+	let processedInstanceLineOffset;
 	try {
-		result = compile_code(text, compiler, processor_options);
+		// run preprocessor if present
+		if (processor_options.svelte_preprocess) {
+			const result = processor_options.svelte_preprocess(text, filename);
+			if (result) {
+				state.pre_line_offsets = get_line_offsets(text);
+				processedResult = result.code;
+				state.post_line_offsets = get_line_offsets(processedResult);
+				if (result.mappings) {
+					state.mappings = decode(result.mappings);
+				}
+
+				if (result.module) {
+					processedModule = result.module;
+					moduleExt = result.module.ext;
+				}
+				if (result.instance) {
+					processedInstance = result.instance;
+					instanceExt = result.instance.ext;
+				}
+
+				processedStyle = result.style;
+
+				processedMarkup = result.markup;
+
+				processor_options.named_blocks = true;
+			}
+		}
+		// get information about the component
+		result = compiler.compile(processedResult || text, { generate: false, ...processor_options.compiler_options });
+		if (processedResult) {
+			const { html, css, instance, module } = result.ast;
+
+			let moduleDiff = processedModule ? processedModule.diff : 0;
+			let instanceDiff = processedInstance ? processedInstance.diff : 0;
+			let styleDiff = processedStyle ? processedStyle.diff : 0;
+			let markupDiff = processedMarkup ? processedMarkup.diff : 0;
+
+			let modulePreOffset = 0;
+			let modulePostOffset = 0;
+			if (module) {
+				if (module.start > html.start) {
+					modulePreOffset += markupDiff;
+				}
+				if (css && module.start > css.start) {
+					modulePreOffset += styleDiff;
+				}
+				if (instance && module.start > instance.start) {
+					modulePreOffset += instanceDiff;
+				}
+
+				modulePostOffset = modulePreOffset + moduleDiff;
+			}
+
+			let instancePreOffset = 0;
+			let instancePostOffset = 0;
+			if (instance) {
+				if (instance.start > html.start) {
+					instancePreOffset += markupDiff;
+				}
+				if (css && instance.start > css.start) {
+					instancePreOffset += styleDiff;
+				}
+				if (module && instance.start > module.start) {
+					instancePreOffset += moduleDiff;
+				}
+
+				instancePostOffset = instancePreOffset + instanceDiff;
+			}
+
+			if (module && processedModule) {
+				moduleEndLine = module.content.loc.end.line;
+				processedModuleLineOffset = processedModule.ast.loc.end.line - moduleEndLine;
+				module.content.body = processedModule.ast.body;
+
+				module.start += modulePreOffset;
+				module.end += modulePostOffset;
+
+				module.content.start += modulePreOffset;
+				module.content.end += modulePostOffset;
+			}
+
+			if (instance && processedInstance) {
+				instanceEndLine = instance.content.loc.end.line;
+				processedInstanceLineOffset = processedInstance.ast.loc.end.line - instanceEndLine;
+				instance.content.body = processedInstance.ast.body;
+
+				instance.start += instancePreOffset;
+				instance.end += instancePostOffset;
+
+				instance.content.start += instancePreOffset;
+				instance.content.end += instancePostOffset;
+			}
+		}
 	} catch ({ name, message, start, end }) {
 		// convert the error to a linting message, store it, and return
 		state.messages = [
@@ -450,46 +367,45 @@ const preprocess = text => {
 		];
 		return [];
 	}
-	const { ast, warnings, vars, mapper } = result;
-
+	const { ast, warnings, vars } = result;
 	const references_and_reassignments = `{${vars.filter(v => v.referenced).map(v => v.name)};${vars.filter(v => v.reassigned || v.export_name).map(v => v.name + '=0')}}`;
 	state.var_names = new Set(vars.map(v => v.name));
 
 	// convert warnings to linting messages
-	const filtered_warnings = processor_options.ignore_warnings ? warnings.filter(warning => !processor_options.ignore_warnings(warning)) : warnings;
-	state.messages = filtered_warnings.map(({ code, message, start, end }) => {
-		const start_pos = processor_options.typescript && start ?
-			mapper.get_original_position(start) :
-			start && { line: start.line, column: start.column + 1 };
-		const end_pos = processor_options.typescript && end ?
-			mapper.get_original_position(end) :
-			end && { line: end.line, column: end.column + 1 };
+	state.messages = (processor_options.ignore_warnings ? warnings.filter(warning => !processor_options.ignore_warnings(warning)) : warnings).map(({ code, message, start, end }) => {
+		let fixLine = 0;
+
+		if (processedInstanceLineOffset && start && start.line > instanceEndLine ) {
+			fixLine += processedInstanceLineOffset;
+		}
+
+		if (processedModuleLineOffset && start && start.line > moduleEndLine ) {
+			fixLine += processedModuleLineOffset;
+		}
 		return {
 			ruleId: code,
 			severity: 1,
 			message,
-			line: start_pos && start_pos.line,
-			column: start_pos && start_pos.column,
-			endLine: end_pos && end_pos.line,
-			endColumn: end_pos && end_pos.column,
-		};
+			line: start && start.line + fixLine,
+			column: start && start.column + 1,
+			endLine: end && end.line + fixLine,
+			endColumn: end && end.column + 1,
+		}
 	});
 
 	// build strings that we can send along to ESLint to get the remaining messages
 
-	// Things to think about:
-	// - not all Svelte files may be typescript -> do we need a distinction on a file basis by analyzing the attribute + a config option to tell "treat all as TS"?
-	const with_file_ending = (filename) => `${filename}${processor_options.typescript ? '.ts' : '.js'}`;
-
 	if (ast.module) {
 		// block for <script context='module'>
 		const block = new_block();
-		state.blocks.set(with_file_ending('module'), block);
+		state.blocks.set(`module.${moduleExt}`, block);
 
 		get_translation(text, block, ast.module.content);
 
 		if (ast.instance) {
-			block.transformed_code += text.slice(ast.instance.content.start, ast.instance.content.end);
+			block.transformed_code += processedResult
+			? processedInstance.original
+			: text.slice(ast.instance.content.start, ast.instance.content.end);
 		}
 
 		block.transformed_code += references_and_reassignments;
@@ -498,7 +414,7 @@ const preprocess = text => {
 	if (ast.instance) {
 		// block for <script context='instance'>
 		const block = new_block();
-		state.blocks.set(with_file_ending('instance'), block);
+		state.blocks.set(`instance.${instanceExt}`, block);
 
 		block.transformed_code = vars.filter(v => v.injected || v.module).map(v => `let ${v.name};`).join('');
 
@@ -510,17 +426,19 @@ const preprocess = text => {
 	if (ast.html) {
 		// block for template
 		const block = new_block();
-		state.blocks.set(with_file_ending('template'), block);
+		state.blocks.set('template.js', block);
 
 		block.transformed_code = vars.map(v => `let ${v.name};`).join('');
 
 		const nodes_with_contextual_scope = new WeakSet();
 		let in_quoted_attribute = false;
+		const htmlText = processedResult || text;
+
 		compiler.walk(ast.html, {
 			enter(node, parent, prop) {
 				if (prop === 'expression') {
 					return this.skip();
-				} else if (prop === 'attributes' && '\'"'.includes(text[node.end - 1])) {
+				} else if (prop === 'attributes' && '\'"'.includes(htmlText[node.end - 1])) {
 					in_quoted_attribute = true;
 				}
 				contextual_names.length = 0;
@@ -541,7 +459,7 @@ const preprocess = text => {
 				if (node.expression && typeof node.expression === 'object') {
 					// add the expression in question to the constructed string
 					block.transformed_code += '(';
-					get_translation(text, block, node.expression, { template: true, in_quoted_attribute });
+					get_translation(htmlText, block, node.expression, { template: true, in_quoted_attribute });
 					block.transformed_code += ');';
 				}
 			},
@@ -563,69 +481,30 @@ const preprocess = text => {
 	return [...state.blocks].map(([filename, { transformed_code: text }]) => processor_options.named_blocks ? { text, filename } : text);
 };
 
-// How it works for JS:
-// 1. compile code
-// 2. return ast/vars/warnings
-// How it works for TS:
-// 1. transpile script contents from TS to JS
-// 2. compile result to get Svelte compiler warnings
-// 3. provide a mapper to map those warnings back to its original positions
-// 4. blank script contents
-// 5. compile again to get the AST with original positions in the markdown part
-// 6. use AST and warnings of step 5, vars of step 2
-function compile_code(text, compiler, processor_options) {
-	let ast;
-	let warnings;
-	let vars;
-
-	let mapper;
-	let ts_result;
-	if (processor_options.typescript) {
-		const diffs = [];
-		let accumulated_diff = 0;
-		const transpiled = text.replace(/<script(\s[^]*?)?>([^]*?)<\/script>/gi, (match, attributes = '', content) => {
-			const output = processor_options.typescript.transpileModule(
-				content,
-				{ reportDiagnostics: false, compilerOptions: { target: processor_options.typescript.ScriptTarget.ESNext, sourceMap: true } }
-			);
-			const original_start = text.indexOf(content);
-			const generated_start = accumulated_diff + original_start;
-			accumulated_diff += output.outputText.length - content.length;
-			diffs.push({
-				original_start: original_start,
-				generated_start: generated_start,
-				generated_end: generated_start + output.outputText.length,
-				diff: output.outputText.length - content.length,
-				original_content: content,
-				generated_content: output.outputText,
-				map: output.sourceMapText
-			});
-			return `<script${attributes}>${output.outputText}</script>`;
-		});
-		mapper = new DocumentMapper(text, transpiled, diffs);
-		ts_result = compiler.compile(transpiled, { generate: false, ...processor_options.compiler_options });
-
-		text = text.replace(/<script(\s[^]*?)?>([^]*?)<\/script>/gi, (match, attributes = '', content) => {
-			return `<script${attributes}>${content
-				// blank out the content
-				.replace(/[^\n]/g, ' ')
-				// excess blank space can make the svelte parser very slow (sec->min). break it up with comments (works in style/script)
-				.replace(/[^\n][^\n][^\n][^\n]\n/g, '/**/\n')
-			}</script>`;
-		});
+const unmap = message => {
+	for (let j = 0; j < 2; j++) {
+		if (message[j ? 'endLine' : 'line']) {
+			const mapping = find_last(state.mappings[message[j ? 'endLine' : 'line'] - 1], ([column]) => column < message[j ? 'endColumn' : 'column']);
+			if (!mapping || mapping[1] !== 0) {
+				return false;
+			}
+			message[j ? 'endLine' : 'line'] = mapping[2] + 1;
+			message[j ? 'endColumn' : 'column'] += mapping[3] - mapping[0];
+		}
 	}
-
-	const result = compiler.compile(text, { generate: false, ...processor_options.compiler_options });
-
-	if (!processor_options.typescript) {
-		({ ast, warnings, vars } = result);
-	} else {
-		ast = result.ast;
-		({ warnings, vars } = ts_result);
+	if (message.fix) {
+		for (let j = 0; j < 2; j++) {
+			const line = find_last_index(state.post_line_offsets, offset => offset < message.fix.range[j]);
+			const line_offset = state.post_line_offsets[line];
+			const mapping = find_last(state.mappings[line], ([column]) => column < message.fix.range[j] - line_offset);
+			if (!mapping || mapping[1] !== 0) {
+				return false;
+			}
+			message.fix.range[j] += mapping[3] - mapping[0] + state.pre_line_offsets[mapping[2]] - line_offset;
+		}
 	}
-
-	return { ast, warnings, vars, mapper };
-}
+	return true;
+};
 
 // transform a linting message according to the module/instance script info we've gathered
 const transform_message = ({ transformed_code }, { unoffsets, dedent, offsets, range }, message) => {
@@ -744,6 +623,9 @@ const postprocess = blocks_messages => {
 			}
 		}
 	}
+	if (state.mappings) {
+		state.messages = state.messages.filter(unmap);
+	}
 
 	// sort messages and return
 	const sorted_messages = state.messages.sort((a, b) => a.line - b.line || a.column - b.column);
